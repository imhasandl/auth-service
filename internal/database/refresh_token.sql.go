// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteRefreshTokenByToken = `-- name: DeleteRefreshTokenByToken :exec
DELETE FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) DeleteRefreshTokenByToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByToken, token)
	return err
}

const deleteTokenByUserID = `-- name: DeleteTokenByUserID :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteTokenByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTokenByUserID, userID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, user_id, expiry_time, created_at FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiryTime,
		&i.CreatedAt,
	)
	return i, err
}

const refreshToken = `-- name: RefreshToken :one
INSERT INTO refresh_tokens (token, user_id, expiry_time) 
VALUES (
   $1, 
   $2, 
   $3
)
RETURNING token, user_id, expiry_time, created_at
`

type RefreshTokenParams struct {
	Token      string
	UserID     uuid.UUID
	ExpiryTime time.Time
}

func (q *Queries) RefreshToken(ctx context.Context, arg RefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, refreshToken, arg.Token, arg.UserID, arg.ExpiryTime)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiryTime,
		&i.CreatedAt,
	)
	return i, err
}
